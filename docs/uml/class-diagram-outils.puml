@startuml
package Escape {
    package Outils {
        class Donnees {
            + {static} String APPDATA_FOLDER
            + {static} boolean DEBUG
            + {static} Set<Locale> SUPPORTED_LOCALES
            ...
            ..Constructeur..
            - Donnees()
        }

        class Resources {
            - {static} Map<String, Image> assets
            ..Constructeur..
            - Resources()
            ..Méthodes..
            + {static} InputStream getAsStream(String)
            + {static} Image getAsset(String)
            + {static} ResourceBundle getI18NBundle(Locale)
            + {static} ResourceBundle getI18NBundle()
            + {static} String getI18NString(String, Locale)
            + {static} String getI18NString(String)
        }

        class FabriqueId {
            - {static} FabriqueId instance
            - int id
            ..Constructeur..
            - FabriqueId()
            ..Méthodes..
            + {static} FabriqueId getInstance()
            + int getId()
        }

        class ErrorBehavior {
            ..Méthodes..
            + {static} void handle(Exception, String)
            + {static} void crash(Exception, String)
            + {static} void showWarning(String, String, String, boolean)
        }

        class FileManager {
            + {static} boolean delete(String)
            + {static} boolean write(JSONObject, String, boolean)
            + {static} JSONObject readFile(String, boolean)
            + {static} Map<String, JSONObject> readDirectory(String, boolean)
            + {static} JSONObject readResourceFile(String)
            + {static} Map<String, JSONObject> readResourceDirectory(String)
            + {static} void open(String, boolean)
            + {static} File getFile(String)
            - {static} boolean writeString(String, String)
            - {static} String readString(String)
            - {static} JSONObject readJSONString(String)
            - {static} SecretKey getSecretKey()
        }

        class ProceduralGenerator {
            - {static} Map<String, Image> assets
            - {static} boolean WALL
            - {static} boolean EMPTY
            - char[][] level
            - List<int[]> visited
            - int width
            - int height
            - List<Personnage> personnages
            - List<Object> objets
            ..Constructeur..
            + ProceduralGenerator(long, int)
            ..Méthodes..
            + {static} long genererSeed()
            + Monde getMonde()
            - void generateMaze(Random, int, int, int, int)
            - void splash(Random)
            - List<int[]> getVoisinsEligibles(int,int)
            - boolean containsCoordinate(List<int[]>, int, int)
            - int[] caseVisiteAleatoire(Random)
        }
    }
}
@enduml
