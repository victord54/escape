@startuml
package Escape {
    package Monde {
        enum TypeMouvement{
            RIGHT
            LEFT
            UP
            DOWN
        }

        abstract class ElementMonde {
            # double x
            # double y
            # double hauteur
            # double largeur
            - Type type
            ..Constructeur..
            + ElementMonde(Type, double, double, double, double)
            + ElementMonde(JSONObject)
            ..Méthodes..
            + JSONObject toJSON()
            + {abstract} char getSymbol()
        }

        package Environment {
            abstract class Terrain {
                ..Constructeur..
                + Terrain(Type, double, double, double, double)
                + Terrain(JSONObject)
                ..Méthodes..
                + boolean estTraversable()
            }

            class Mur extends Terrain {
                ..Constructeur..
                + Mur(double, double, double, double)
                + Mur(JSONObject)
                ..Méthodes..
                + boolean estTraversable()
            }

            class BordureMonde extends Terrain {
                ..Constructeur..
                + BordureMonde(double, double)
                ..Méthodes..
                + boolean estTraversable()
            }

            class Piege extends Terrain {
                - double degats
                ..Constructeur..
                + Piege(double, double, double, double)
                + Piege(JSONObject)
            }
        }

        package Entities {
            abstract class Personnage {
                - int id
                - double degats
                # double vitesse
                # double coeurs
                ..Constructeur..
                + Personnage(Type, double, double, double, double, double)
                + Personnage(Type, double, double, double, double, double, int)
                + Personnage(JSONObject)
                ..Méthodes..
                + {static} Personnage fromJSON(JSONObject)
                + JSONObject toJSON()
                + void deplacer(TypeMouvement, double)
                + void attaquer(List<Personnage>)
                + Rectangle2D getHitboxAttaque()
                + Rectangle2D getHitboxCollision()
                + boolean estUnHeros()
                + boolean estVivant()
            }

            class Heros extends Personnage {
                ..Constructeur..
                + Heros(double, double, double, double)
                + Heros(JSONObject)
                ..Méthodes..
                + boolean estUnHeros()
            }

            abstract class Monstre extends Personnage {
                # ArrayList<TypeMouvement> derniersMouvementsEssayes
                ..Constructeur..
                + Monstre(Type, double, double, double, double, double)
                + Monstre(Type, double, double, double, double, double, int)
                + Monstre(JSONObject)
                + void reinitialiseListMouvementsEssayes()
                + boolean mouvementDansList(TypeMouvement)
            }

            class Walker extends Monstre {
                ..Constructeur..
                + Walker(double, double, double, double)
                + Walker(double, double, double, double, double, int)
                + Walker(JSONObject)
            }
        }

        class Monde {
            ..Constructeur..
            + Monde()
            ..Méthodes..
            + {static} Monde fromMap(String)
            + {static} Monde fromJSON(JSONObject)
            + {static} Monde fromJSON(JSONObject, String)
            + int intLePlusProche(int, int)
            + Graph<Point2D, DefaultEdge> grapheAlternatif(Monstre, int)
            + void heroAttaque()
            + void deplacementHeros(TypeMouvement, double)
            + void deplacementMonstres()
            + void deplacementMonstre(Monstre, double)
            + void pathfinding(Monstre, int, Graph<Point2D, DefaultEdge>, Point2D, Point2D, double)
            + TypeMouvement getMouvement(Point2D, Point2D, Monstre)
            + void mouvementRandom(Monstre, double)
            + boolean collisionAvec(Personnage, boolean)
            + boolean collisionAvecTerrains(Personnage)
            # boolean collision(ElementMonde, ElementMonde)
            - void chargerCarte(String)
        }
    }

    package Outils {
        class Donnees {
            + {static} String APPDATA_FOLDER
            + {static} boolean DEBUG
            + {static} Set<Locale> SUPPORTED_LOCALES
            + {static} double HERO_HEIGHT
            ...
            ..Constructeur..
            - Donnees()
        }

        class Resources {
            - {static} Map<String, Image> assets
            ..Constructeur..
            - Resources()
            ..Méthodes..
            + {static} URL get(String)
            + {static} InputStream getAsStream(String)
            + {static} Image getAsset(String)
            + {static} ResourceBundle getI18NBundle(Locale)
            + {static} ResourceBundle getI18NBundle()
            + {static} String getI18NString(String, Locale)
            + {static} String getI18NString(String)
        }

        class FabriqueId {
            - {static} FabriqueId instance
            - int id
            ..Constructeur..
            - FabriqueId()
            ..Méthodes..
            + {static} FabriqueId getInstance()
            + int getId()
        }

        class ErrorBehavior {
            ..Méthodes..
            + {static} void handle(Exception, String)
            + {static} void crash(Exception, String)
        }

        class FileManager {
            + {static} boolean delete(String)
            + {static} boolean write(JSONObject, String, boolean)
            + {static} JSONObject readFile(String, boolean)
            + {static} Map<String, JSONObject> readDirectory(String, boolean)
            + {static} JSONObject readResourceFile(String)
            + {static} Map<String, JSONObject> readResourceDirectory(String)
            - {static} boolean writeString(String, String)
            - {static} String readString(String)
            - {static} JSONObject readJSONString(String)
            - {static} SecretKey getSecretKey()
        }
    }

    package gui {
        class Sprite
    }

    package engine {
        abstract class GameController
    }

    class SaveData {
        - String filename
        - JSONObject json
        ..Constructeur..
        + SaveData(Map.Entry<String, JSONObject>)
        ..Méthodes..
        + String getDate()
        + double getLife()
        + int getLevel()
        + void deleteFromFS()
    }

    class Settings {
        - {static} PropertyChangeSupport pcs
        + {static} Property<Boolean> fullScreen
        + {static} Property<Boolean> showFps
        + {static} Property<Locale> locale
        ..Méthodes..
        + {static} void reset()
        + {static} void load()
        + {static} void save()
        - {static} boolean ensureSettingsFileExists()
        - {static} void initAutoSave()
    }

    class "Property <T> " as Property {
        - T value
        - String name
        - Map<MyPropertyChangeListener<T>, PropertyChangeListener> listeners
        - PropertyChangeSupport pcs
        - boolean log
        ..Constructeur..
        + Property(PropertyChangeSupport, String, T, Getter<T>, Setter<T>)
        + Property(T, Getter<T>, Setter<T>)
        + Property(PropertyChangeSupport, String, T)
        + Property(T)
        ..Méthodes..
        + T get()
        + void set(T)
        + void subscribe(MyPropertyChangeListener<T>)
        + void subscribeIfNot(MyPropertyChangeListener<T>)
        + void unsubscribe(MyPropertyChangeListener<T>)
        + void unsubscribeAll()
        + void forceFire()
        + Property<T> setLog(boolean)
        - void fire(T)
        - void log(String)
    }

    interface "Getter <T> " as Getter {
        T get(T)
    }

    interface "Setter <T> " as Setter {
        T set(T)
    }
}


' notes
note "Voir diagramme <i>class-gui</i> pour en savoir plus\nsur ces packages et les classes qu'ils contiennent." as N_gui
N_gui .left. engine
N_gui .. gui

note "'Type type' : Uniquement pour\nla sérialisation en JSON." as N_json
N_json ... ElementMonde::Type


' force layout
Outils -[hidden]up- gui
N_json .[hidden].. ElementMonde::Type


' elements monde
ElementMonde --"*" Escape.gui.Sprite
Personnage --"1" TypeMouvement : + orientation

Personnage -up--|> ElementMonde
Terrain -up--|> ElementMonde
Escape.Monde.Monde --- "*" Personnage
Escape.Monde.Monde --- "*" Terrain


' settings
Settings -- Property
Property --"1" Getter
Property --"1" Setter


GameController -- "1" Escape.Monde.Monde

@enduml
