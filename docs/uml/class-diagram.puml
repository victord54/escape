@startuml
package Escape {
    package Monde {
        enum TypeMouvement{
            RIGHT
            LEFT
            UP
            DOWN
        }

        enum GameMode {
            CAMPAIGN
            CUSTOM
        }

        enum KeyAction {
            UP
            LEFT
            DOWN
            RIGHT
            TAKE
            ATTACK
            PAUSE
            SHOW_FPS
            GRID
            ..
            - KeyCode defaultKeyCode
            - String inputId
            - boolean debugOnly
            ..Méthodes..
            + {static} KeyAction fromInputId(String)
        }

        class KeyBindings {
            ..Constructeur..
            + KeyBindings()
            + KeyBindings(JSONObject)
            ..Méthodes..
            + KeyCode get(KeyAction)
            + KeyCode get(String)
            + void set(KeyAction, KeyCode)
            + void set(String, KeyCode)
            + JSONObject toJSON()
            + List<KeyAction> getConflictingKeys()
        }

        abstract class ElementMonde {
            # double x
            # double y
            # double hauteur
            # double largeur
            - Type type
            ..Constructeur..
            + ElementMonde(Type, double, double, double, double)
            + ElementMonde(JSONObject)
            ..Méthodes..
            + JSONObject toJSON()
            + {abstract} String getSymbol()
            + {abstract} Color getColor()
            + {abstract} Image getSprite(int)
            # {abstract} void initSprites()
        }

        package Environment {
            abstract class Terrain {
                ..Constructeur..
                + Terrain(Type, double, double, double, double)
                + Terrain(JSONObject)
                ..Méthodes..
                + {static} Terrain fromJSON(JSONObject)
                + boolean estTraversable()
            }

            class Mur extends Terrain {
                - {static} Image sprite
                ..Constructeur..
                + Mur(double, double, double, double)
                + Mur(JSONObject)
                ..Méthodes..
                + boolean estTraversable()
                + String getSymbol()
                + Color getColor()
                + Image getSprite(int)
                # void initSprites()
            }

            class BordureMonde extends Terrain {
                - {static} Image sprite
                ..Constructeur..
                + BordureMonde(double, double)
                ..Méthodes..
                + boolean estTraversable()
                + String getSymbol()
                + Color getColor()
                + Image getSprite(int)
                # void initSprites()
            }
        }

        package Entities {
            abstract class Personnage {
                # int id
                # double vitesse
                # double coeurs
                # double maxCoeurs
                # boolean isMoving
                # double degats
                ..Constructeur..
                + Personnage(Type, double, double, double, double, double, double, double, double, int)
                + Personnage(JSONObject)
                ..Méthodes..
                + {static} Personnage fromJSON(JSONObject)
                + JSONObject toJSON()
                + void deplacer(TypeMouvement, double)
                + void attaquer(List<Personnage>)
                + Rectangle2D getHitboxAttaque()
                + Rectangle2D getHitboxCollision()
                + boolean estUnHeros()
                + boolean canSwim()
                + boolean estVivant()
                + void coeursPerdu(double)
                + void coeursGagne(double)
                + boolean boolean peutTraverserObstacles()
                + {abstract} Personnage clone()
                + void copierStatistique(Personnage)
            }

            class Heros extends Personnage {
                - {static} Map<TypeMouvement, Image[]> sprites
                - double trainingProgress
                ..Constructeur..
                + Heros(double, double, double, double, double, double, double, double, int)
                + Heros(JSONObject)
                ..Méthodes..
                + JSONObject toJSON()
                + boolean estUnHeros()
                + boolean canSwim()
                + String getSymbol()
                + Color getColor()
                + Image getSprite(int)
                + Heros clone()
                + void copierStatistique(Personnage)
                + void addTrainingTime(long)
                # void initSprites()
            }

            abstract class Monstre extends Personnage {
                # ArrayList<TypeMouvement> derniersMouvementsEssayes
                ..Constructeur..
                + Monstre(Type, double, double, double, double, double, double, double, int)
                + Monstre(JSONObject)
                + attaquer(List<Personnage>)
                + void reinitialiseListMouvementsEssayes()
                + boolean mouvementDansList(TypeMouvement)
                + void copierStatistique(Personnage)
            }

            class Walker extends Monstre {
                - {static} Map<TypeMouvement, Image[]> sprites
                ..Constructeur..
                + Walker(double, double, double, double, double, double, double, int)
                + Walker(JSONObject)
                ..Méthodes..
                + String getSymbol()
                + Color getColor()
                + Image getSprite(int)
                + Walker clone()
                # void initSprites()
                + void copierStatistique(Personnage)
            }

            class Fantome extends Monstre {
                - {static} Map<TypeMouvement, Image[]> sprites
                ..Constructeur..
                + Fantome(double, double, double, double, double, double, double, double, int)
                + Fantome(JSONObject)
                ..Méthodes..
                + boolean peutTraverserObstacles()
                + String getSymbol()
                + Color getColor()
                + Image getSprite(int)
                + Fantome clone()
                # void initSprites()
                + void copierStatistique(Personnage)
            }
        }
        package Objects {
            abstract class Objet {
                # boolean visible
                ..Constructeur..
                + Objet(Type, double, double, double, double, boolean)
                + Objet(JSONObject)
                ..Méthodes..
                + {static} Objet fromJSON(JSONObject)
                + void consommePar(Personnage, Monde)
                + JSONObject toJSON()
                + boolean estRamassable()
                + boolean estConsommable()
                + boolean estDeclenchable()
                + boolean necessiteDureePourActivation()
                + boolean estTrappe()
                + void notOnObject(Personnage)
                + void onObject(Personnage, long)
            }

            class Coeur extends Objet {
                - {static} Image sprite
                # double valeur
                ..Constructeur..
                + Coeur(double, double, double, double, double)
                + Coeur(JSONObject)
                ..Méthodes..
                + JSONObject toJSON()
                + String getSymbol()
                + Color getColor()
                + Image getSprite(int)
                + void consommePar(Personnage, Monde)
                + boolean estConsommable()
                # void initSprites()
                + boolean estTrappe()
            }

            class Piege extends Objet {
                - {static} Image sprite
                # double degats
                ..Constructeur..
                + Piege(double, double, double, double, double)
                + Piege(JSONObject json)
                ..Méthodes..
                + JSONObject toJSON()
                + String getSymbol()
                + Color getColor()
                + Image getSprite(int)
                + boolean estDeclenchable()
                + boolean estRamassable()
                + void consommePar(Personnage, Monde)
                + boolean estDeclenchable()
                # void initSprites()
                + boolean estTrappe()
            }

            class Trappe extends Objet {
                - {static} Image sprite
                - String carteOuTeleporter
                - boolean ouverte
                ..Constructeur..
                + Trappe(double, double, double, double, String, boolean)
                + Trappe(JSONObject json)
                ..Méthodes..
                + JSONObject toJSON()
                + String getSymbol()
                + Color getColor()
                + Image getSprite(int)
                + boolean estDeclenchable()
                + void consommePar(Personnage, Monde)
                + boolean estDeclenchable()
                + boolean estTrappe()
                + void ouvrir()
                # void initSprites()
            }

            class Training extends Objet {
                - {static} Image[] sprites
                - boolean heroWasOn
                - long lassTime
                ..Constructeur..
                + Training(double, double, double, double)
                + Training(JSONObject)
                ..Méthodes..
                + JSONObject toJSON()
                + String getSymbol()
                + Color getColor()
                + Image getSprite(int)
                + boolean necessiteDureePourActivation()
                + void notOnObject(Personnage)
                + void onObject(Personnage, long)
                # void initSprites()
            }
        }

        class Monde {
            ..Constructeur..
            + Monde(int, int)
            ..Méthodes..
            + {static} Monde fromMap(String, GameMode)
            + {static} Monde fromJSON(JSONObject)
            - {static} void validateElement(ElementMonde, Monde, boolean)
            + void deplacementHeros(TypeMouvement, double)
            + void deplacementMonstres()
            # void deplacementMonstre(Monstre, double)
            + boolean collisionAvecTerrains(Personnage)
            # boolean collision(ElementMonde, ElementMonde)
            # boolean collisionAvec(Personnage, boolean)
            - void pathfinding(Monstre, int, Graph, Point2D, Point2D, double)
            - Graph grapheAlternatif(Monstre, int)
            - void mouvementRandom(Monstre, double)
            - TypeMouvement getMouvement(Point2D, Point2D, Monstre)
            + void heroRamassageObjet()
            - void heroDeclencheObjet()
            - void activationObjetAvecDuree(long)
            + void heroAttaque()
            + void monstreAttaque()
            # int intLePlusProche(int, int)
            - JSONObject toJSONSave()
            + void copierMonde(Monde)
            + void changerMap(String)
            + boolean monstresTousMorts()
        }
    }

    package engine {
        abstract class GameController
    }

    class LevelData {
        - String filename
        ..Constructeur..
        + LevelData(Map.Entry<String, JSONObject>)
        ..Méthodes..
        + String getTitle()
        + void setListener(LevelButtonsListener)
        + void onLoad()
    }

    class SaveData {
        - String filename
        - JSONObject json
        ..Constructeur..
        + SaveData(Map.Entry<String, JSONObject>)
        ..Méthodes..
        + String getDate()
        + double getLife()
        + String getLevel()
        + String getModeStr()
        + void deleteFromFS()
        + void setListener(SaveButtonsListener)
        + void onLoad()
        + void onDelete()
    }

    class Settings {
        - {static} PropertyChangeSupport pcs
        + {static} Property<Boolean> fullScreen
        + {static} Property<Boolean> showFps
        + {static} Property<Locale> locale
        ..Méthodes..
        + {static} void reset()
        + {static} void save()
        + {static} void load()
        - {static} void initAutoSave()
    }

    class "Property <T> " as Property {
        - T value
        - String name
        - Map<MyPropertyChangeListener<T>, PropertyChangeListener> listeners
        - PropertyChangeSupport pcs
        - boolean log
        ..Constructeur..
        + Property(PropertyChangeSupport, String, T, Getter<T>, Setter<T>)
        + Property(T, Getter<T>, Setter<T>)
        + Property(PropertyChangeSupport, String, T)
        + Property(T)
        ..Méthodes..
        + T get()
        + void set(T)
        + void subscribe(MyPropertyChangeListener<T>)
        + void subscribeIfNot(MyPropertyChangeListener<T>)
        + void unsubscribe(MyPropertyChangeListener<T>)
        + void unsubscribeAll()
        + void forceFire()
        + Property<T> setLog(boolean)
        - void fire(T)
        - void log(String)
    }

    interface "Getter <T> " as Getter {
        T get(T)
    }

    interface "Setter <T> " as Setter {
        T set(T)
    }
}

note "'Type type' : Uniquement pour\nla sérialisation en JSON." as N_json
N_json .. ElementMonde::Type

Escape.Monde.Monde -left- "1" GameMode : - gameMode
KeyBindings -left- "*" KeyAction : - keys
Personnage --"2" TypeMouvement : + orientation, dernierMouvement

Personnage -up--|> ElementMonde
Terrain -up--|> ElementMonde
Objet -up--|> ElementMonde
Escape.Monde.Monde --- "*" Personnage
Escape.Monde.Monde --- "*" Terrain
Escape.Monde.Monde --- "*" Objet


' settings
Settings -- Property
Property --"1" Getter
Property --"1" Setter


GameController -- "1" Escape.Monde.Monde


' force layout
SaveData -up[hidden]- Getter
SaveData -up[hidden]- Setter
LevelData -up[hidden]- SaveData
GameMode -left[hidden]- KeyBindings
KeyAction -left[hidden]- Property


@enduml
